initSidebarItems({"enum":[["PyErrValue","Represents a `PyErr` value"]],"fn":[["prepare_freethreaded_python","Prepares the use of Python in a free-threaded context."]],"macro":[["import_exception","Defines rust type for exception defined in Python code."],["int_convert_bignum",""],["int_fits_larger_int",""],["py_exception","Defines a new exception type."],["pyobject_downcast","Implements a typesafe conversions throught [FromPyObject], given a typecheck function as second parameter"],["pyobject_native_type",""],["pyobject_native_type_convert",""],["pyobject_native_type_named",""],["wrap_function","Returns a function that takes a [Python] instance and returns a python function."]],"mod":[["buffer","`PyBuffer` implementation"],["class","Python object protocols"],["ffi","Rust FFI declarations for Python"],["freelist","Free allocation list"],["prelude","A collection of items you most likely want to have in scope when working with pyo3"],["proc_macro","The proc macros, which are also part of the prelude"],["python",""],["typeob","Python type object information"],["types","Various types defined by the python interpreter such as `int`, `str` and `tuple`"]],"struct":[["GILGuard","RAII type that represents the Global Interpreter Lock acquisition."],["NoArgs","An empty struct that represents the empty argument list. Corresponds to the empty tuple `()` in Python."],["Py","Safe wrapper around unsafe `*mut ffi::PyObject` pointer with specified type information."],["PyDowncastError","Marker type that indicates an error while downcasting"],["PyErr","Represents a Python exception that was raised."],["PyObject","Safe wrapper around unsafe `*mut ffi::PyObject` pointer."],["PyToken",""]],"trait":[["AsPyRef","Trait implements object reference extraction from python managed pointer."],["FromPyObject","`FromPyObject` is implemented by various types that can be extracted from a Python object reference."],["IntoPyObject","Conversion trait that allows various objects to be converted into `PyObject` by consuming original object."],["IntoPyTuple","Conversion trait that allows various objects to be converted into `PyTuple` object."],["ObjectProtocol","Python object model helper methods"],["PyErrArguments","Helper conversion trait that allows to use custom arguments for exception constructor."],["PyObjectWithToken","Any instance that is managed Python can have access to `gil`."],["PyTryFrom","Trait implemented by Python object types that allow a checked downcast. This trait is similar to `std::convert::TryFrom`"],["PyTryInto","Trait implemented by Python object types that allow a checked downcast. This trait is similar to `std::convert::TryInto`"],["ReturnTypeIntoPyResult","This trait wraps a T: IntoPyObject into PyResult while PyResult remains PyResult."],["ToBorrowedObject","This trait has two implementations: The slow one is implemented for all [ToPyObject] and creates a new object using [ToPyObject::to_object], while the fast one is only implemented for ToPyPointer (we know that every ToPyObject is also ToPyObject) and uses [ToPyPointer::as_ptr()]"],["ToPyObject","Conversion trait that allows various objects to be converted into `PyObject`"]],"type":[["PyResult","Represents the result of a Python call."]]});