initSidebarItems({"attr":[["pyclass",""],["pyfunction",""],["pymethods",""],["pymodule","Internally, this proc macro create a new c function called `PyInit_{my_module}` that then calls the init function you provided"],["pyproto",""]],"struct":[["GILGuard","RAII type that represents the Global Interpreter Lock acquisition."],["Py","Safe wrapper around unsafe `*mut ffi::PyObject` pointer with specified type information."],["PyErr","Represents a Python exception that was raised."],["PyModule","Represents a Python `module` object."],["PyObject","A python object"],["Python","Marker type that indicates that the GIL is currently held."]],"trait":[["AsPyRef",""],["FromPy","Similar to [std::convert::From], just that it requires a gil token."],["FromPyObject","`FromPyObject` is implemented by various types that can be extracted from a Python object reference."],["IntoPy","Similar to [std::convert::Into], just that it requires a gil token."],["IntoPyPointer","This trait allows retrieving the underlying FFI pointer from Python objects."],["ObjectProtocol","Python object model helper methods"],["PyTryFrom","Trait implemented by Python object types that allow a checked downcast. This trait is similar to `std::convert::TryFrom`"],["PyTryInto","Trait implemented by Python object types that allow a checked downcast. This trait is similar to `std::convert::TryInto`"],["ToPyObject","Conversion trait that allows various objects to be converted into `PyObject`"]],"type":[["PyResult","Represents the result of a Python call."]]});